#!/usr/bin/env bash
set -euo pipefail

# color codes
RESTORE='\033[0m'
NC='\033[0m'
BLACK='\033[00;30m'
RED='\033[00;31m'
GREEN='\033[00;32m'
YELLOW='\033[00;33m'
BLUE='\033[00;34m'
ORANGE='\033[38;5;214m'
PURPLE='\033[00;35m'
CYAN='\033[00;36m'
SEA="\\033[38;5;49m"
LIGHTGRAY='\033[00;37m'
LBLACK='\033[01;30m'
LRED='\033[01;31m'
LGREEN='\033[01;32m'
LYELLOW='\033[01;33m'
LBLUE='\033[01;34m'
LPURPLE='\033[01;35m'
LCYAN='\033[01;36m'
WHITE='\033[01;37m'
OVERWRITE='\e[1A\e[K'

#emoji codes
CHECK_MARK="${GREEN}\xE2\x9C\x94${NC}"
X_MARK="${RED}\xE2\x9C\x96${NC}"
PIN="${RED}\xF0\x9F\x93\x8C${NC}"
CLOCK="${GREEN}\xE2\x8C\x9B${NC}"
ARROW="${SEA}\xE2\x96\xB6${NC}"
BOOK="${RED}\xF0\x9F\x93\x8B${NC}"
HOT="${ORANGE}\xF0\x9F\x94\xA5${NC}"
WARNING="${RED}\xF0\x9F\x9A\xA8${NC}"
RIGHT_ANGLE="${GREEN}\xE2\x88\x9F${NC}"

DOTFILES_LOG="$HOME/.dotfiles.log"
DOTFILES_DIR="$HOME/.dotfiles"

function __task {
	TASK="$1"
  # if _task is called while a task was set, complete the previous
  if [[ $TASK != "" ]]; then
    printf "${LGREEN} [âœ“]  ${LGREEN}${TASK}\n"
  fi
}

# _cmd performs commands with error checking
function _cmd {
  #create log if it doesn't exist
  if ! [[ -f $DOTFILES_LOG ]]; then
    touch $DOTFILES_LOG
  fi
  # empty conduro.log
  > $DOTFILES_LOG
  # hide stdout, on error we print and exit
  if eval "$1" 1> /dev/null 2> $DOTFILES_LOG; then
    return 0 # success
  fi
  # read error from log and add spacing
  printf "${OVERWRITE}${LRED} [X]  ${TASK}${LRED}\n"
  while read line; do
    printf "      ${line}\n"
  done < $DOTFILES_LOG
  printf "\n"
  # remove log file
  rm $DOTFILES_LOG
  # exit installation
  exit 1
}

function set_git_credentials {
  printf "${SEA}Configuring git credentials\n"
  printf "${SEA}Enter git email\n"
  read email

  printf "${SEA}Enter git name\n"
  read name
  git config --global user.email $email
  git config --global user.name $name
  git config --global credential.helper store
  printf "${GREEN}Git credentials configured!\n"
}

function ubuntu_setup() {
	# Checking for Ansible installation
  if ! dpkg -s ansible >/dev/null 2>&1; then
	    __task "Installing Ansible"
	    _cmd "sudo apt-get update"
	    _cmd "sudo apt-get install -y software-properties-common"
	    _cmd "sudo apt-add-repository -y ppa:ansible/ansible"
	    _cmd "sudo apt-get update"
	    _cmd "sudo apt-get install -y ansible"
	    _cmd "sudo apt-get install python3-argcomplete"
	    _cmd "sudo activate-global-python-argcomplete3"
	else
		__task "Ansible already installed"
	fi
	# Checking for Python3 installation
    if ! dpkg -s python3 >/dev/null 2>&1; then
        __task "Installing Python3"
        _cmd "sudo apt-get install -y python3"
    else
        __task "Python already installed"
    fi
}

if ! [[ -f "$HOME/.git-credentials" ]]; then
	set_gir_credentials
else
	printf "${LGREEN}Git credentials exist. Skipping.\n"
fi

ubuntu_setup

if ! [[ -d "$DOTFILES_DIR" ]]; then
  __task "Cloning repository"
  _cmd "git clone --quiet https://github.com/powN1/.dotfiles.git $DOTFILES_DIR"
else
  __task "Updating repository"
  _cmd "git -C $DOTFILES_DIR pull --quiet"
fi

# Cd into dotfiles dir
pushd "$DOTFILES_DIR" 2>&1 > /dev/null
# Run ansible playbook to install all the things
ansible-playbook "$DOTFILES_DIR/main.yml" "$@" --ask-become-pass

rm -f ~/.bashrc
printf "${LGREEN}Symlinking files with gnustow\n"
if stow .; then
    echo "Stow operation completed. Files symlinked."
else
    echo "Error: Stow operation failed."
    exit 1
fi

printf "${LGREEN}Sourcing .bashrc file\n"
BASH_FILE="$HOME/.bashrc"
if ! [[ -f "$BASH_FILE" ]] >/dev/null 2>&1; then
    echo "Error: File $BASH_FILE does not exist. Exiting."
    exit 1
else
    source "$BASH_FILE"
fi

printf "${LGREEN}Sourcing tmux.conf file\n"
TMUX_CONF_FILE="~/.dotfiles/.config/tmux/tmux.conf"
if ! [[ -f "$TMUX_CONF_FILE" ]] >/dev/null 2>&1; then
    echo "Error: File $TMUX_CONF_FILE does not exist. Exiting."
    exit 1
    source "$TMUX_CONF_FILE"
else
fi

printf "${GREEN}All installed. Don't forget to reboot for good measure\n"
