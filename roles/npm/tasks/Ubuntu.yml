---
- name: "{{ ansible_distribution }} | Dependencies"
  ansible.builtin.apt:
    name: jq
    state: present
  become: true
- name: "Get latest STABLE NodeJS version"
  ansible.builtin.shell:
    cmd: curl -sL https://nodejs.org/dist/index.json | jq -r '.[] | select(.lts) | .version' | head -n 1
  register: nodejs_latest_version
  changed_when: false

- name: "Check if NodeJS is installed"
  ansible.builtin.command: node --version
  register: nodejs_installed
  failed_when: false
  changed_when: false

- name: "Check if NodeJS is up to date"
  ansible.builtin.command: node --version
  register: nodejs_up_to_date
  failed_when: false
  changed_when: false

- name: "Show NodeJS version"
  ansible.builtin.debug:
    msg: "Installed NodeJS version: {{ nodejs_installed.stdout }}"

- name: "Show NodeJS latest version"
  ansible.builtin.debug:
    msg: "Online NodeJS LTS version: {{ nodejs_latest_version.stdout }}"

- name: "Register update needed"
  ansible.builtin.set_fact:
    nodejs_install_needed: true
  when:
    # - nodejs_installed.rc == 0
    # - nodejs_up_to_date.rc != 0
    - nodejs_up_to_date.stdout != nodejs_latest_version.stdout

- name: "Install NodeJS"
  become: true
  when:
    - nodejs_install_needed is defined
    - nodejs_install_needed
  block:
    - name: "Get System Arch"
      ansible.builtin.set_fact:
        nodejs_arch: "{{ ansible_machine | replace('x86_64', 'x64') | replace('aarch64', 'arm64') }}"

    - name: "Register Pagkage Name"
      ansible.builtin.set_fact:
        nodejs_package_name: "node-{{ nodejs_latest_version.stdout }}-{{ ansible_system | lower }}-{{ nodejs_arch }}"

    - name: "Download NodeJS"
      ansible.builtin.get_url:
        url: "https://nodejs.org/dist/{{ nodejs_latest_version.stdout }}/{{ nodejs_package_name }}.tar.xz"
        dest: /tmp/{{ nodejs_package_name }}.tar.xz
        mode: "0644"

    - name: Ensure Extraction NodeJS directory exists
      ansible.builtin.file:
        path: /tmp/{{ nodejs_package_name }}
        state: directory
        mode: "0755"

    - name: "Extract NodeJS"
      ansible.builtin.unarchive:
        src: /tmp/{{ nodejs_package_name }}.tar.xz
        dest: /tmp/{{ nodejs_package_name }}
        remote_src: true
        extra_opts: "--strip-components=1"

    - name: "Copy NodeJS"
      ansible.builtin.copy:
        src: /tmp/{{ nodejs_package_name }}/bin/
        dest: /usr/local/bin/
        remote_src: true
        mode: "0755"

    - name: Ensure NodeJS Modules directory exists
      ansible.builtin.file:
        path: /usr/local/lib/node_modules
        state: directory
        mode: "0755"

    - name: "Copy NodeJS Modules"
      ansible.builtin.copy:
        src: /tmp/{{ nodejs_package_name }}/lib/node_modules/
        dest: /usr/local/lib/node_modules/
        remote_src: true
        mode: "0755"

    - name: "Symlink npm/npx executable to /usr/local/bin/"
      ansible.builtin.shell:
        cmd: ln -s /usr/local/lib/node_modules/npm/bin/npm-cli.js /usr/local/bin/npm && ln -s /usr/local/lib/node_modules/npm/bin/npx-cli.js /usr/local/bin/npx

# - name: "Install NPM Packages"
#   community.general.npm:
#     name: "{{ item }}"
#     global: true
#   with_items:
#     - bun
#     - blitz
